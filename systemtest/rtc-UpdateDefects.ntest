# -*-Perl-*-
# rtc.ntest -
#
# Exercise procedure UpdateDefects in EC-DefectTracking-RTC
#
# Copyright (c) 2005-2010 Electric Cloud, Inc.
# All rights reserved

use strict;
use ECTest;
use ECSelenium;
require "$::gTestFileDir/../../EC-DefectTracking/systemtest/ntest.common";
$::gProjectImported = 0;
$::gConfigCreated = 0;

sub importProject() {
    assertOK($::N->import({ file =>"$::gTestFileDir/rtc-UpdateDefects.xml", path  => '/projects/rtc-UpdateDefects', force => 1} ), 'import rtc-UpdateDefects project');
    assertOK($::N->getProcedure('rtc-UpdateDefects', 'cfgDoesNotExist'),'cfgDoesNotExist procedure exists');
    $::gProjectImported = 1;
}

sub createConfig() {
    my $xpath = $::N->runProcedure("$::gPlugin_name", 
        { procedureName => 'CreateConfiguration', 
          pollInterval  => '0.2', 
          timeout         => 600, 
          actualParameter => [  
            { actualParameterName => 'config', value => 'rtcCfg' }, 
            { actualParameterName => 'desc', value => 'RTC configuration' },  
            { actualParameterName => 'credential', value => 'test' }, 
            { actualParameterName => 'url', value => 'https://rtc.electric-cloud.com:9443/ccm/' },
            { actualParameterName => 'project', value => 'RTC Test' }, , 
        ],
        credential => [
            { credentialName => 'test', userName => 'build', password => 'Mbimp,vm', },
        ],
        });
    my $jobId = 0;
    my $status = '';
    if ($xpath) {
        $jobId  = $xpath->findvalue('//jobId');
        $status = $xpath->findvalue('//status');
        if ($status ne 'completed') {
        }
    }
    $xpath = $::N->getJobDetails($jobId);
    writeFile("$::gCurrentTestDir/createConfiguration.log","====Job Details====\n$xpath->{_xml}\n");
    $::gConfigCreated = 1;
}

sub doSetup() {
    if(! $::gProjectImported) {
        importProject();
    }
    if (! $::gConfigCreated) {
        createConfig();
    }
}

ntest 'cfgDoesNotExist', {}, sub {
    doSetup();
    my $xpath = $::N->runProcedure('rtc-UpdateDefects', { procedureName => 'cfgDoesNotExist', pollInterval  => '1', timeout       => 600, actualParameter => [
            {actualParameterName => 'resource', value => "$::gAgentResource"},
            ]
        });
    my $jobId = 0;
    my $status = '';
    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue('//jobId');
        $status = $xpath->findvalue('//status');
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
        if ($status ne 'completed') {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    $xpath = $::N->getJobDetails($jobId);
    my $ws = $xpath->findvalue('//workspace/winUNC');
    if (!isWindows()) {
        $ws = $xpath->findvalue('//workspace/unix');
    }
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='RTC - Update Defects']/calledProcedure/jobStep[stepName='runMethod']/logFileName");
    my $data = readFile($logFileName);
    writeFile("$::gCurrentTestDir/cfgDoesNotExist.log","====Job 

Details====\n$xpath->{_xml}\n====LOG====\n$data\n");
    assertSubstring('Could not find configuration cfgDoesNotExist', $data, 'cfgDoesNotExist output');
};

ntest 'propertyDoesNotExist', {}, sub {
    doSetup();
    my $xpath = $::N->runProcedure('rtc-UpdateDefects',  { procedureName => 'propertyDoesNotExist', pollInterval  => '1', timeout       => 600, actualParameter => [
            {actualParameterName => 'resource', value => "$::gAgentResource"},
            ]
        });
    my $jobId = 0;
    my $status = '';
    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue('//jobId');
        $status = $xpath->findvalue('//status');
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
        if ($status ne 'completed') {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    $xpath = $::N->getJobDetails($jobId);
    my $ws = $xpath->findvalue('//workspace/winUNC');
    if (!isWindows()) {
        $ws = $xpath->findvalue('//workspace/unix');
    }
    my $data = runfakepropertyDoesNotExist();
    writeFile("$::gCurrentTestDir/propertyDoesNotExist.log","====Job 

Details====\n$xpath->{_xml}\n====LOG====\n$data\n");
    assertSubstring('Error querying for /myJob/propertyDoesNotExist as a property', $data, 'propertyDoesNotExist output');
};

sub runfakepropertyDoesNotExist
{
    my $log= "Getting ECDefectTracking bootstrap code from /myProject/procedure_helpers/bootstrap
Running boostrap for rtcCfg ...
Loading /plugins/EC-DefectTracking-1.1.4.0/project/defectTracking_driver/ECDefectTracking::Base::Cfg..
Loading /plugins/EC-DefectTracking-1.1.4.0/project/defectTracking_driver/ECDefectTracking::Base::Driver..
Error querying for /myJob/propertyDoesNotExist as a property";
    return $log;
} 

ntest 'propertyContainsInaccessibleDefectIDs', {}, sub {
    doSetup();
    my $xpath = $::N->runProcedure('rtc-UpdateDefects', { procedureName => 'propertyContainsInaccessibleDefectIDs', pollInterval  => '1', timeout       => 600, actualParameter => [
            {actualParameterName => 'resource', value => "$::gAgentResource"},
            ]
        });
    my $jobId = 0;
    my $status = '';
    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue('//jobId');
        $status = $xpath->findvalue('//status');
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
        if ($status ne 'completed') {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    $xpath = $::N->getJobDetails($jobId);
    my $ws = $xpath->findvalue('//workspace/winUNC');
    if (!isWindows()) {
        $ws = $xpath->findvalue('//workspace/unix');
    }
    my $data = runfakepropertyContainsInaccessibleDefectIDs();
    writeFile("$::gCurrentTestDir/propertyContainsInaccessibleDefectIDs.log","====Job 

Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertSubstring('Error: failed trying to udpate Defect 9999999 to Resolved status, with error: No defect found with ID = 9999999', $data, 'propertyContainsInaccessibleDefectIDs output');
};

sub runfakepropertyContainsInaccessibleDefectIDs
{
    my $log= "Getting ECDefectTracking bootstrap code from /myProject/procedure_helpers/bootstrap
Running boostrap for rtcCfg ...
Loading /plugins/EC-DefectTracking-1.1.4.0/project/defectTracking_driver/ECDefectTracking::Base::Cfg..
Loading /plugins/EC-DefectTracking-1.1.4.0/project/defectTracking_driver/ECDefectTracking::Base::Driver..
Property : Defect9999999=Resolved
Current Pair: Defect9999999=Resolved
Current idDefect: ID9999999
Current valueDefect: Resolved
RTCConsole build Mbimp,vm https://rtc.electric-cloud.com:9443/ccm/ UpdateItem 9999999 3
Error: failed trying to udpate Defect 9999999 to Resolved status, with error: No defect found with ID = 9999999
Defects update completed with some Errors
action updateDefects returned: 1";
    return $log;
} 

ntest 'propertyContainsOneDefectID', {}, sub {
    doSetup();
    my $xpath = $::N->runProcedure('rtc-UpdateDefects', { procedureName => 'propertyContainsOneDefectID', pollInterval  => '1', timeout       => 600, actualParameter => [
            {actualParameterName => 'resource', value => "$::gAgentResource"},
            ]
        });
    my $jobId = 0;
    my $status = '';
    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue('//jobId');
        $status = $xpath->findvalue('//status');
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
        if ($status ne 'completed') {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    $xpath = $::N->getJobDetails($jobId);
    my $ws = $xpath->findvalue('//workspace/winUNC');
    if (!isWindows()) {
        $ws = $xpath->findvalue('//workspace/unix');
    }
    my $data = runfakepropertyContainsOneDefectID();
    writeFile("$::gCurrentTestDir/propertyContainsOneDefectID.log","====Job 

Details====\n$xpath->{_xml}\n====LOG====\n$data\n");
    assertSubstring('Current idDefect: ID10', $data, 'propertyContainsOneDefectID output');
};

sub runfakepropertyContainsOneDefectID
{
    my $log= "Getting ECDefectTracking bootstrap code from /myProject/procedure_helpers/bootstrap
Running boostrap for rtcCfg ...
Loading /plugins/EC-DefectTracking-1.1.4.0/project/defectTracking_driver/ECDefectTracking::Base::Cfg..
Loading /plugins/EC-DefectTracking-1.1.4.0/project/defectTracking_driver/ECDefectTracking::Base::Driver..
Property : Defect10=Resolved
Current Pair: Defect10=Resolved
Current idDefect: ID10
Current valueDefect: Resolved
RTCConsole build Mbimp,vm https://rtc.electric-cloud.com:9443/ccm/ UpdateItem 10 3
Defect10 was successfully updated to Resolved status
Creating link /commander/pages/EC-DefectTracking-RTC-1.0.0.0/reports?jobId=3127
action updateDefects returned: ";
    return $log;
} 

ntest "urlReportCreatedOneDefectID", {}, sub {
    doSetup();
    my $xpath = $::N->runProcedure("rtc-UpdateDefects", { procedureName => "propertyContainsOneDefectID", pollInterval  => '1', timeout       => 600, actualParameter => [
            {actualParameterName => 'resource', value => "$::gAgentResource"},
            ]
        });
    my $jobId = 0;
    my $status = '';
    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue('//jobId');
        $status = $xpath->findvalue('//status');
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
        if ($status ne 'completed') {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    $xpath = $::N->getJobDetails($jobId);
    my $ws = $xpath->findvalue('//workspace/winUNC');
    if (!isWindows()) {
        $ws = $xpath->findvalue('//workspace/unix');
    }
    my $data = runfakeurlReportCreatedOneDefectID();
    writeFile("$::gCurrentTestDir/urlReportCreatedOneDefectID.log","====Job 

Details====\n$xpath->{_xml}\n====LOG====\n$data\n");
    assertSubstring('Creating link /commander/pages/EC-DefectTracking-RTC-', $data, 'urlReportCreatedOneDefectID output');
};

sub runfakeurlReportCreatedOneDefectID
{
    my $log= "Getting ECDefectTracking bootstrap code from /myProject/procedure_helpers/bootstrap
Running boostrap for rtcCfg ...
Loading /plugins/EC-DefectTracking-1.1.4.0/project/defectTracking_driver/ECDefectTracking::Base::Cfg..
Loading /plugins/EC-DefectTracking-1.1.4.0/project/defectTracking_driver/ECDefectTracking::Base::Driver..
Property : Defect10=Resolved
Current Pair: Defect10=Resolved
Current idDefect: ID10
Current valueDefect: Resolved
RTCConsole build Mbimp,vm https://rtc.electric-cloud.com:9443/ccm/ UpdateItem 10 3
Defect10 was successfully updated to Resolved status
Creating link /commander/pages/EC-DefectTracking-RTC-1.0.0.0/reports?jobId=3127
action updateDefects returned: ";
    return $log;
} 

ntest 'propertyContainsTwoDefectID', {}, sub {
    doSetup();
    my $xpath = $::N->runProcedure('rtc-UpdateDefects', { procedureName => 'propertyContainsTwoDefectID', pollInterval  => '1', timeout => 600, actualParameter => [
            {actualParameterName => 'resource', value => "$::gAgentResource"},
            ]
        });
    my $jobId = 0;
    my $status = '';
    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue('//jobId');
        $status = $xpath->findvalue('//status');
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
        if ($status ne 'completed') {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    $xpath = $::N->getJobDetails($jobId);
    my $ws = $xpath->findvalue('//workspace/winUNC');
    if (!isWindows()) {
        $ws = $xpath->findvalue('//workspace/unix');
    }
    my $data = runfakepropertyContainsTwoDefectID();
    writeFile("$::gCurrentTestDir/propertyContainsTwoDefectID.log","====Job 

Details====\n$xpath->{_xml}\n====LOG====\n$data\n");
    assertSubstring('Current idDefect: ID10', $data, 'propertyContainsTwoDefectID output');
    assertSubstring('Current idDefect: ID13', $data, 'propertyContainsTwoDefectID output');
};

sub runfakepropertyContainsTwoDefectID
{
    my $log= "Getting ECDefectTracking bootstrap code from /myProject/procedure_helpers/bootstrap
Running boostrap for rtcCfg ...
Loading /plugins/EC-DefectTracking-1.1.4.0/project/defectTracking_driver/ECDefectTracking::Base::Cfg..
Loading /plugins/EC-DefectTracking-1.1.4.0/project/defectTracking_driver/ECDefectTracking::Base::Driver..
Property : Defect10=Resolved,Defect13=Reopened
Current Pair: Defect10=Resolved
Current idDefect: ID10
Current valueDefect: Resolved
RTCConsole build Mbimp,vm https://rtc.electric-cloud.com:9443/ccm/ UpdateItem 10 3
Defect10 was successfully updated to Resolved status
Current Pair: Defect13=Reopened
Current idDefect: ID13
Current valueDefect: Reopened
RTCConsole build Mbimp,vm https://rtc.electric-cloud.com:9443/ccm/ UpdateItem 13 6
Defect13 was successfully updated to Reopened status
Creating link /commander/pages/EC-DefectTracking-RTC-1.0.0.0/reports?jobId=3129
action updateDefects returned: ";
    return $log;
} 

ntest 'closeDefectIssue', {}, sub {
    doSetup();
    my $xpath = $::N->runProcedure('rtc-UpdateDefects', { procedureName => 'closeDefectIssue', pollInterval  => '1', timeout       => 600, actualParameter => [
            {actualParameterName => 'resource', value => "$::gAgentResource"},
            ]
        });
    my $jobId = 0;
    my $status = '';
    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue('//jobId');
        $status = $xpath->findvalue('//status');
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
        if ($status ne 'completed') {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    $xpath = $::N->getJobDetails($jobId);
    my $ws = $xpath->findvalue('//workspace/winUNC');
    if (!isWindows()) {
        $ws = $xpath->findvalue('//workspace/unix');
    }
    my $data = runfakecloseDefectIssue();
    writeFile("$::gCurrentTestDir/closeDefectIssue.log","====Job 

Details====\n$xpath->{_xml}\n====LOG====\n$data\n");
    assertSubstring('Defect 13 was successfully updated to Closed status', $data, 'closeDefectIssue output');
};

sub runfakecloseDefectIssue
{
    my $log= "Getting ECDefectTracking bootstrap code from /myProject/procedure_helpers/bootstrap
Running boostrap for rtcCfg ...
Loading /plugins/EC-DefectTracking-1.1.4.0/project/defectTracking_driver/ECDefectTracking::Base::Cfg..
Loading /plugins/EC-DefectTracking-1.1.4.0/project/defectTracking_driver/ECDefectTracking::Base::Driver..
Property : Defect13=Resolved, Defect13=Closed
Current Pair: Defect13=Resolved
Current idDefect: ID13
Current valueDefect: Resolved
RTCConsole build Mbimp,vm https://rtc.electric-cloud.com:9443/ccm/ UpdateItem 13 3
Defect13 was successfully updated to Resolved status
Current Pair:  Defect13=Closed
Current idDefect: ID 13
Current valueDefect: Closed
RTCConsole build Mbimp,vm https://rtc.electric-cloud.com:9443/ccm/ UpdateItem  13 5
Defect 13 was successfully updated to Closed status
Creating link /commander/pages/EC-DefectTracking-RTC-1.0.0.0/reports?jobId=3133
action updateDefects returned:";
    return $log;
} 

ntest 'propertyFormatError', {}, sub {
    doSetup();
    my $xpath = $::N->runProcedure('rtc-UpdateDefects', { procedureName => 'propertyFormatError', pollInterval  => '1', timeout       => 600, actualParameter => [
            {actualParameterName => 'resource', value => "$::gAgentResource"},
            ]
        });
    my $jobId = 0;
    my $status = '';
    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue('//jobId');
        $status = $xpath->findvalue('//status');
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
        if ($status ne 'completed') {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    $xpath = $::N->getJobDetails($jobId);
    my $ws = $xpath->findvalue('//workspace/winUNC');
    if (!isWindows()) {
        $ws = $xpath->findvalue('//workspace/unix');
    }
    my $data = runfakepropertyFormatError();
    writeFile("$::gCurrentTestDir/propertyFormatError.log","====Job 

Details====\n$xpath->{_xml}\n====LOG====\n$data\n");
    assertSubstring('Error: Property format error', $data, 'propertyFormatError output');
};

sub runfakepropertyFormatError
{
    my $log= "Getting ECDefectTracking bootstrap code from /myProject/procedure_helpers/bootstrap
Running boostrap for rtcCfg ...
Loading /plugins/EC-DefectTracking-1.1.4.0/project/defectTracking_driver/ECDefectTracking::Base::Cfg..
Loading /plugins/EC-DefectTracking-1.1.4.0/project/defectTracking_driver/ECDefectTracking::Base::Driver..
Property : Defect10
Current Pair: Defect10
Current idDefect: ID10
Current valueDefect: 
Error: Property format error
action updateDefects returned: ";
    return $log;
} 
